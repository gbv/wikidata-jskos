#!/usr/bin/env node

const program = require('commander')
const { readFileSync } = require('fs')
const pkg = require('../package.json')
const { red } = require('chalk')
const wds = require("../lib/wikidata-wrapper")
const ndjson = require("../lib/ndjson")

program
  .version(pkg.version)
  .description('Access Wikidata in JSKOS format')
  .option('-l, --lang <lang>', 'language(s), comma-separated')
  .option('-s, --scheme <id>', 'limit mappings to selected scheme')
  .option('-f, --force', 'force reloading mapping schemes')

// TODO: option to not include subjectOf

const error = (message, showHelp) => {
  console.error(red(message))
  if (showHelp) { program.help() }
  process.exit(1)
}

const getMappingSchemes = () => {
  const language = program.language || 'en'
  const maxAge = program.force ? 0 : 7*24*3600
  return wds.getMappingSchemes({language, maxAge})
}

program
  .command('concept <id...>').alias('c')
  .description('get Wikidata entity as JSKOS concept')
  .action( ids => {
    const language = program.language || 'en'
    getMappingSchemes()
      .then( schemes => new wds.service(schemes) )
      .then( service => service.getConcepts({uri:ids, language}) )
      .then( ndjson.write )
  })

program
  .command('schemes').alias('s')
  .description('get mapping properties as concept schemes')
  .action( () => {
    getMappingSchemes()
      .then(ndjson.write)
  })

program
  .command('mappings [from] [to]').alias('m') // TODO: allow notation as 'to'
  .description('get mappings between Wikidata and other schemes')
  .action( (from, to) => {
    from = from && from.length < 2 ? '' : from
    to   = to && to.length < 2 ? '' : to
    if (!from && !to) {
      error('missing required argument `from\' and/or `to\'')
    }
    let toScheme = (from && program.scheme) ? program.scheme : null
    getMappingSchemes()
      .then( schemes => new wds.service(schemes) )
      .then( service => service.getMappings({from,to,toScheme}) )
      .then( ndjson.write )
  })

program
  .command('add [file]').alias('a')
  .description('add or update a mapping')
  .action( (file) => {
      const json = readFileSync(file ? file : 0, 'utf-8')
      const mapping = JSON.parse(json)
      // TODO: validate, check whether uri exists
      // then upateMapping, else insertMapping
  })

// complain on unknown commands
program
  .on('command:*', () => error(`unknown command '${program.args[0]}'`, true))

// execute
program.parse(process.argv)

// Show help by default
if (!program.args.length) program.help()

// Prevent logging an EPIPE error when piping the output
process.stdout.on('error', err => {
  if (err.code !== 'EPIPE') throw err
})
