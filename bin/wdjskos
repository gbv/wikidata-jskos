#!/usr/bin/env node

const program = require("commander")
const { readFileSync } = require("fs")
const { version } = require("../package.json")
const { red } = require("chalk")
const wds = require("../lib/wikidata-wrapper")
const wdk = require("../lib/utils/wdk")
const { WikidataJSKOSService } = wds
const ndjson = require("../lib/ndjson")
const suggestSearch = require("../lib/suggest")

program
  .version(version)
  .description("Access Wikidata in JSKOS format")
  .option("-l, --lang <lang>", "language(s), comma-separated")
  .option("-s, --scheme <id>", "limit mappings to selected scheme")
  .option("-i, --simplify", "simplify Wikidata JSON")
  .option("-f, --force", "force reloading mapping schemes")
  .option("-b, --both", "include both mapping directions")

// TODO: option to not include subjectOf

const error = (message, showHelp) => {
  console.error(red(message))
  if (showHelp) { program.help() }
  process.exit(1)
}

const getMappingSchemes = () => {
  const language = program.lang || "en"
  const maxAge = program.force ? 0 : 7 * 24 * 3600
  return wds.getMappingSchemes({ language, maxAge })
}

function searchCommand (query) {
  return suggestSearch({search: query.join(" ")})
    .then(suggest => {
      console.log(suggest)
    })
}

function conceptCommand (ids) {
  const language = program.lang || "en"
  getMappingSchemes()
    .then(schemes => new WikidataJSKOSService(schemes))
    .then(service => service.getConcepts({ uri: ids.join("|"), language }))
    .then(ndjson.write)
}

function schemesCommand () {
  getMappingSchemes()
    .then(ndjson.write)
}

function mappingsCommand (from, to) {
  let direction = program.both || to === undefined ? "both" : "forward"

  if (from === "-") from = undefined
  if (to === "-") to = undefined

  let toScheme = (from || direction !== "forward") ? program.scheme : null
  getMappingSchemes()
    .then(schemes => new WikidataJSKOSService(schemes))
    .then(service => service.getMappings({ from, to, toScheme, direction }))
    .then(ndjson.write)
    .catch(e => error(e.message))
}

function mapMappingCommand(mapping) {
  const { simplify } = program
  return getMappingSchemes()
    .then(schemes => new WikidataJSKOSService(schemes))
    .then(service => {
      try {
        return service.mapMapping(mapping, { simplify })
      } catch(e) {
        error(e)
      }
    })
}

program
  .command("find <query...>").alias("f")
  .description("search an entity")
  .action(searchCommand)

program
  .command("concept <id...>").alias("c")
  .description("get Wikidata entity as JSKOS concept")
  .action(conceptCommand)

program
  .command("schemes").alias("s")
  .description("get mapping properties as concept schemes")
  .action(schemesCommand)

program
  .command("mappings [from] [to]").alias("m")
  .description("get mappings between Wikidata and other schemes")
  .action(mappingsCommand)

program
  .command("mapping-item [file]").alias("i")
  .description("convert a JSKOS mapping to a Wikidata item")
  .action((file) => {
    const json = readFileSync(file || 0, "utf-8")
    const mapping = JSON.parse(json)

    mapMappingCommand(mapping)
      .then(item => console.log(JSON.stringify(item, null, "  ")))
  })

program
  .command("add-mapping [file]").alias("a")
  .description("add or update a mapping (not implemented yet)")
  .action((file) => {
    const json = readFileSync(file || 0, "utf-8")
    const mapping = JSON.parse(json)

    mapMappingCommand(mapping).then(item => {
      if (!item.uri) {
        // TODO: check whether statement exists
      }

      console.log(JSON.stringify(item, null, "  "))
      // TODO: validate, check whether uri exists
      // then upateMapping, else insertMapping

    })
  })

program
  .on("command:*", () => {
    const arg = program.args[0]
    if (wdk.isEntityId(arg)) {
      conceptCommand([arg])
    } else {
      error(`unknown command '${arg}'`, true)
    }
  })

// execute
program.parse(process.argv)

// Show help by default
if (!program.args.length) program.help()

// Prevent logging an EPIPE error when piping the output
process.stdout.on("error", err => {
  if (err.code !== "EPIPE") throw err
})
