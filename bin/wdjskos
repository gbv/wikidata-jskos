#!/usr/bin/env node

import { Command } from "commander"
import { readFileSync } from "fs"
import { readFile } from "node:fs/promises"
const pkg = JSON.parse(await readFile(new URL("../package.json", import.meta.url), "utf-8"))
import chalk from "chalk"
import wdk from "../lib/wdk.js"
import { WikidataService } from "../lib/wikidata-wrapper.js"
import * as ndjson from "../lib/ndjson.js"
import suggest from "../lib/suggest.js"
import { loadMappingSchemes, updateMappingSchemes } from "../lib/mapping-schemes.js"
import getConcepts from "../lib/queries/get-concepts.js"

const program = new Command()

program
  .version(pkg.version)
  .description("Access Wikidata in JSKOS format")
  .option("-l, --lang <lang>", "language(s), comma-separated")
  .option("-n, --number <int>", "maximum number of mappings to return")
  .option("-s, --scheme <id>", "limit mappings to selected scheme")
  .option("-i, --simplify", "simplify Wikidata JSON")
  .option("-f, --force", "force reloading mapping schemes")
  .option("-b, --both", "include both mapping directions")

// TODO: option to not include subjectOf

const error = (message, showHelp) => {
  console.error(chalk.red(message))
  if (showHelp) {
    program.help()
  }
  process.exit(1)
}

function searchCommand (query) {
  return suggest({search: query.join(" ")})
    .then(suggest => {
      console.log(suggest)
    })
}

function conceptCommand (ids) {
  const language = program.opts().lang || "en"

  getMappingSchemes()
    .then(schemes => new WikidataService(schemes))
    .then(() => getConcepts({ uri: ids.join("|"), language }))
    .then(ndjson.write)
}

async function getMappingSchemes() {
  if (program.opts().force) {
    return updateMappingSchemes()
  } else {
    return Promise.resolve(loadMappingSchemes())
  }
}

function schemesCommand () {
  getMappingSchemes().then(ndjson.write)
}

function mappingsCommand (from, to) {
  const { both, lang, scheme, number: limit } = program.opts()
  let direction = both || to === undefined ? "both" : "forward"

  if (from === "-") {
    from = undefined
  }
  if (to === "-") {
    to = undefined
  }

  let toScheme = (from || direction !== "forward") ? scheme : null
  getMappingSchemes()
    .then(schemes => new WikidataService(schemes))
    .then(service => service.getMappings({ from, to, toScheme, direction, languages: lang, limit }))
    .then(ndjson.write)
    .catch(e => error(e.message))
}

function mapMappingCommand(mapping) {
  const { simplify } = program.opts()

  return getMappingSchemes()
    .then(schemes => new WikidataService(schemes))
    .then(service => {
      try {
        return service.mapMapping(mapping, { simplify })
      } catch(e) {
        error(e)
      }
    })
}

program
  .command("find <query...>").alias("f")
  .description("search an entity")
  .action(searchCommand)

program
  .command("concept <id...>").alias("c")
  .description("get Wikidata entity as JSKOS concept")
  .action(conceptCommand)

program
  .command("schemes").alias("s")
  .description("get mapping properties as concept schemes")
  .action(schemesCommand)

program
  .command("update").alias("u")
  .description("update mapping properties from Wikidata")
  .action(updateMappingSchemes)

program
  .command("mappings [from] [to]").alias("m")
  .description("get mappings between Wikidata and other schemes")
  .action(mappingsCommand)

program
  .command("mapping-item [file]").alias("i")
  .description("convert a JSKOS mapping to a Wikidata item")
  .action((file) => {
    const json = readFileSync(file || 0, "utf-8")
    const mapping = JSON.parse(json)

    mapMappingCommand(mapping)
      .then(item => console.log(JSON.stringify(item, null, "  ")))
  })

program
  .command("add-mapping [file]").alias("a")
  .description("add or update a mapping (not implemented yet)")
  .action((file) => {
    const json = readFileSync(file || 0, "utf-8")
    const mapping = JSON.parse(json)

    mapMappingCommand(mapping).then(item => {
      if (!item.uri) {
        // TODO: check whether statement exists
      }

      console.log(JSON.stringify(item, null, "  "))
      // TODO: validate, check whether uri exists
      // then upateMapping, else insertMapping

    })
  })

program
  .on("command:*", () => {
    const arg = program.args[0]
    if (wdk.isEntityId(arg)) {
      conceptCommand([arg])
    } else {
      error(`unknown command '${arg}'`, true)
    }
  })

// execute
program.parse(process.argv)

// Show help by default
if (!program.args.length) {
  program.help()
}

// Prevent logging an EPIPE error when piping the output
process.stdout.on("error", err => {
  if (err.code !== "EPIPE") {
    throw err
  }
})
